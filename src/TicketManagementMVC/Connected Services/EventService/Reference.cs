//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TicketManagementMVC.EventService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EventService.IWcfEventService")]
    public interface IWcfEventService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEventService/Create", ReplyAction="http://tempuri.org/IWcfEventService/CreateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfBusinessLogic.Core.Contracts.Exceptions.ServiceValidationFaultDetails), Action="http://tempuri.org/IWcfEventService/CreateServiceValidationFaultDetailsFault", Name="ServiceValidationFaultDetails", Namespace="http://schemas.datacontract.org/2004/07/WcfBusinessLogic.Core.Contracts.Exception" +
            "s")]
        int Create(WcfBusinessLogic.Core.Contracts.Data.Event entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEventService/Create", ReplyAction="http://tempuri.org/IWcfEventService/CreateResponse")]
        System.Threading.Tasks.Task<int> CreateAsync(WcfBusinessLogic.Core.Contracts.Data.Event entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEventService/Update", ReplyAction="http://tempuri.org/IWcfEventService/UpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfBusinessLogic.Core.Contracts.Exceptions.ServiceValidationFaultDetails), Action="http://tempuri.org/IWcfEventService/UpdateServiceValidationFaultDetailsFault", Name="ServiceValidationFaultDetails", Namespace="http://schemas.datacontract.org/2004/07/WcfBusinessLogic.Core.Contracts.Exception" +
            "s")]
        void Update(WcfBusinessLogic.Core.Contracts.Data.Event entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEventService/Update", ReplyAction="http://tempuri.org/IWcfEventService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(WcfBusinessLogic.Core.Contracts.Data.Event entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEventService/Delete", ReplyAction="http://tempuri.org/IWcfEventService/DeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfBusinessLogic.Core.Contracts.Exceptions.ServiceValidationFaultDetails), Action="http://tempuri.org/IWcfEventService/DeleteServiceValidationFaultDetailsFault", Name="ServiceValidationFaultDetails", Namespace="http://schemas.datacontract.org/2004/07/WcfBusinessLogic.Core.Contracts.Exception" +
            "s")]
        void Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEventService/Delete", ReplyAction="http://tempuri.org/IWcfEventService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEventService/Get", ReplyAction="http://tempuri.org/IWcfEventService/GetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfBusinessLogic.Core.Contracts.Exceptions.ServiceValidationFaultDetails), Action="http://tempuri.org/IWcfEventService/GetServiceValidationFaultDetailsFault", Name="ServiceValidationFaultDetails", Namespace="http://schemas.datacontract.org/2004/07/WcfBusinessLogic.Core.Contracts.Exception" +
            "s")]
        WcfBusinessLogic.Core.Contracts.Data.Event Get(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEventService/Get", ReplyAction="http://tempuri.org/IWcfEventService/GetResponse")]
        System.Threading.Tasks.Task<WcfBusinessLogic.Core.Contracts.Data.Event> GetAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEventService/ToList", ReplyAction="http://tempuri.org/IWcfEventService/ToListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfBusinessLogic.Core.Contracts.Exceptions.ServiceValidationFaultDetails), Action="http://tempuri.org/IWcfEventService/ToListServiceValidationFaultDetailsFault", Name="ServiceValidationFaultDetails", Namespace="http://schemas.datacontract.org/2004/07/WcfBusinessLogic.Core.Contracts.Exception" +
            "s")]
        WcfBusinessLogic.Core.Contracts.Data.Event[] ToList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEventService/ToList", ReplyAction="http://tempuri.org/IWcfEventService/ToListResponse")]
        System.Threading.Tasks.Task<WcfBusinessLogic.Core.Contracts.Data.Event[]> ToListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEventService/GetPublishedEvents", ReplyAction="http://tempuri.org/IWcfEventService/GetPublishedEventsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfBusinessLogic.Core.Contracts.Exceptions.ServiceValidationFaultDetails), Action="http://tempuri.org/IWcfEventService/GetPublishedEventsServiceValidationFaultDetai" +
            "lsFault", Name="ServiceValidationFaultDetails", Namespace="http://schemas.datacontract.org/2004/07/WcfBusinessLogic.Core.Contracts.Exception" +
            "s")]
        WcfBusinessLogic.Core.Contracts.Data.EventBusinessModel[] GetPublishedEvents(WcfBusinessLogic.Core.Contracts.Data.FilterEventOptions filter, string filterText, string dateCulture);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEventService/GetPublishedEvents", ReplyAction="http://tempuri.org/IWcfEventService/GetPublishedEventsResponse")]
        System.Threading.Tasks.Task<WcfBusinessLogic.Core.Contracts.Data.EventBusinessModel[]> GetPublishedEventsAsync(WcfBusinessLogic.Core.Contracts.Data.FilterEventOptions filter, string filterText, string dateCulture);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEventService/GetEventInformation", ReplyAction="http://tempuri.org/IWcfEventService/GetEventInformationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfBusinessLogic.Core.Contracts.Exceptions.ServiceValidationFaultDetails), Action="http://tempuri.org/IWcfEventService/GetEventInformationServiceValidationFaultDeta" +
            "ilsFault", Name="ServiceValidationFaultDetails", Namespace="http://schemas.datacontract.org/2004/07/WcfBusinessLogic.Core.Contracts.Exception" +
            "s")]
        WcfBusinessLogic.Core.Contracts.Data.EventBusinessModel GetEventInformation(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEventService/GetEventInformation", ReplyAction="http://tempuri.org/IWcfEventService/GetEventInformationResponse")]
        System.Threading.Tasks.Task<WcfBusinessLogic.Core.Contracts.Data.EventBusinessModel> GetEventInformationAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEventService/GetEventManagerEvents", ReplyAction="http://tempuri.org/IWcfEventService/GetEventManagerEventsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfBusinessLogic.Core.Contracts.Exceptions.ServiceValidationFaultDetails), Action="http://tempuri.org/IWcfEventService/GetEventManagerEventsServiceValidationFaultDe" +
            "tailsFault", Name="ServiceValidationFaultDetails", Namespace="http://schemas.datacontract.org/2004/07/WcfBusinessLogic.Core.Contracts.Exception" +
            "s")]
        WcfBusinessLogic.Core.Contracts.Data.Event[] GetEventManagerEvents(int venueId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEventService/GetEventManagerEvents", ReplyAction="http://tempuri.org/IWcfEventService/GetEventManagerEventsResponse")]
        System.Threading.Tasks.Task<WcfBusinessLogic.Core.Contracts.Data.Event[]> GetEventManagerEventsAsync(int venueId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEventService/HasLockedSeats", ReplyAction="http://tempuri.org/IWcfEventService/HasLockedSeatsResponse")]
        bool HasLockedSeats(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEventService/HasLockedSeats", ReplyAction="http://tempuri.org/IWcfEventService/HasLockedSeatsResponse")]
        System.Threading.Tasks.Task<bool> HasLockedSeatsAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWcfEventServiceChannel : TicketManagementMVC.EventService.IWcfEventService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WcfEventServiceClient : System.ServiceModel.ClientBase<TicketManagementMVC.EventService.IWcfEventService>, TicketManagementMVC.EventService.IWcfEventService {
        
        public WcfEventServiceClient() {
        }
        
        public WcfEventServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WcfEventServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WcfEventServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WcfEventServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Create(WcfBusinessLogic.Core.Contracts.Data.Event entity) {
            return base.Channel.Create(entity);
        }
        
        public System.Threading.Tasks.Task<int> CreateAsync(WcfBusinessLogic.Core.Contracts.Data.Event entity) {
            return base.Channel.CreateAsync(entity);
        }
        
        public void Update(WcfBusinessLogic.Core.Contracts.Data.Event entity) {
            base.Channel.Update(entity);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(WcfBusinessLogic.Core.Contracts.Data.Event entity) {
            return base.Channel.UpdateAsync(entity);
        }
        
        public void Delete(int id) {
            base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public WcfBusinessLogic.Core.Contracts.Data.Event Get(int id) {
            return base.Channel.Get(id);
        }
        
        public System.Threading.Tasks.Task<WcfBusinessLogic.Core.Contracts.Data.Event> GetAsync(int id) {
            return base.Channel.GetAsync(id);
        }
        
        public WcfBusinessLogic.Core.Contracts.Data.Event[] ToList() {
            return base.Channel.ToList();
        }
        
        public System.Threading.Tasks.Task<WcfBusinessLogic.Core.Contracts.Data.Event[]> ToListAsync() {
            return base.Channel.ToListAsync();
        }
        
        public WcfBusinessLogic.Core.Contracts.Data.EventBusinessModel[] GetPublishedEvents(WcfBusinessLogic.Core.Contracts.Data.FilterEventOptions filter, string filterText, string dateCulture) {
            return base.Channel.GetPublishedEvents(filter, filterText, dateCulture);
        }
        
        public System.Threading.Tasks.Task<WcfBusinessLogic.Core.Contracts.Data.EventBusinessModel[]> GetPublishedEventsAsync(WcfBusinessLogic.Core.Contracts.Data.FilterEventOptions filter, string filterText, string dateCulture) {
            return base.Channel.GetPublishedEventsAsync(filter, filterText, dateCulture);
        }
        
        public WcfBusinessLogic.Core.Contracts.Data.EventBusinessModel GetEventInformation(int id) {
            return base.Channel.GetEventInformation(id);
        }
        
        public System.Threading.Tasks.Task<WcfBusinessLogic.Core.Contracts.Data.EventBusinessModel> GetEventInformationAsync(int id) {
            return base.Channel.GetEventInformationAsync(id);
        }
        
        public WcfBusinessLogic.Core.Contracts.Data.Event[] GetEventManagerEvents(int venueId, int userId) {
            return base.Channel.GetEventManagerEvents(venueId, userId);
        }
        
        public System.Threading.Tasks.Task<WcfBusinessLogic.Core.Contracts.Data.Event[]> GetEventManagerEventsAsync(int venueId, int userId) {
            return base.Channel.GetEventManagerEventsAsync(venueId, userId);
        }
        
        public bool HasLockedSeats(int id) {
            return base.Channel.HasLockedSeats(id);
        }
        
        public System.Threading.Tasks.Task<bool> HasLockedSeatsAsync(int id) {
            return base.Channel.HasLockedSeatsAsync(id);
        }
    }
}
