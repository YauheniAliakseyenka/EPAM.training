//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TicketManagementMVC.VenueService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="VenueService.IWcfVenueService")]
    public interface IWcfVenueService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfVenueService/Create", ReplyAction="http://tempuri.org/IWcfVenueService/CreateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfBusinessLogic.Core.Contracts.Exceptions.ServiceValidationFaultDetails), Action="http://tempuri.org/IWcfVenueService/CreateServiceValidationFaultDetailsFault", Name="ServiceValidationFaultDetails", Namespace="http://schemas.datacontract.org/2004/07/WcfBusinessLogic.Core.Contracts.Exception" +
            "s")]
        int Create(WcfBusinessLogic.Core.Contracts.Data.Venue entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfVenueService/Create", ReplyAction="http://tempuri.org/IWcfVenueService/CreateResponse")]
        System.Threading.Tasks.Task<int> CreateAsync(WcfBusinessLogic.Core.Contracts.Data.Venue entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfVenueService/Update", ReplyAction="http://tempuri.org/IWcfVenueService/UpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfBusinessLogic.Core.Contracts.Exceptions.ServiceValidationFaultDetails), Action="http://tempuri.org/IWcfVenueService/UpdateServiceValidationFaultDetailsFault", Name="ServiceValidationFaultDetails", Namespace="http://schemas.datacontract.org/2004/07/WcfBusinessLogic.Core.Contracts.Exception" +
            "s")]
        void Update(WcfBusinessLogic.Core.Contracts.Data.Venue entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfVenueService/Update", ReplyAction="http://tempuri.org/IWcfVenueService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(WcfBusinessLogic.Core.Contracts.Data.Venue entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfVenueService/Delete", ReplyAction="http://tempuri.org/IWcfVenueService/DeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfBusinessLogic.Core.Contracts.Exceptions.ServiceValidationFaultDetails), Action="http://tempuri.org/IWcfVenueService/DeleteServiceValidationFaultDetailsFault", Name="ServiceValidationFaultDetails", Namespace="http://schemas.datacontract.org/2004/07/WcfBusinessLogic.Core.Contracts.Exception" +
            "s")]
        void Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfVenueService/Delete", ReplyAction="http://tempuri.org/IWcfVenueService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfVenueService/Get", ReplyAction="http://tempuri.org/IWcfVenueService/GetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfBusinessLogic.Core.Contracts.Exceptions.ServiceValidationFaultDetails), Action="http://tempuri.org/IWcfVenueService/GetServiceValidationFaultDetailsFault", Name="ServiceValidationFaultDetails", Namespace="http://schemas.datacontract.org/2004/07/WcfBusinessLogic.Core.Contracts.Exception" +
            "s")]
        WcfBusinessLogic.Core.Contracts.Data.Venue Get(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfVenueService/Get", ReplyAction="http://tempuri.org/IWcfVenueService/GetResponse")]
        System.Threading.Tasks.Task<WcfBusinessLogic.Core.Contracts.Data.Venue> GetAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfVenueService/ToList", ReplyAction="http://tempuri.org/IWcfVenueService/ToListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfBusinessLogic.Core.Contracts.Exceptions.ServiceValidationFaultDetails), Action="http://tempuri.org/IWcfVenueService/ToListServiceValidationFaultDetailsFault", Name="ServiceValidationFaultDetails", Namespace="http://schemas.datacontract.org/2004/07/WcfBusinessLogic.Core.Contracts.Exception" +
            "s")]
        WcfBusinessLogic.Core.Contracts.Data.Venue[] ToList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfVenueService/ToList", ReplyAction="http://tempuri.org/IWcfVenueService/ToListResponse")]
        System.Threading.Tasks.Task<WcfBusinessLogic.Core.Contracts.Data.Venue[]> ToListAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWcfVenueServiceChannel : TicketManagementMVC.VenueService.IWcfVenueService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WcfVenueServiceClient : System.ServiceModel.ClientBase<TicketManagementMVC.VenueService.IWcfVenueService>, TicketManagementMVC.VenueService.IWcfVenueService {
        
        public WcfVenueServiceClient() {
        }
        
        public WcfVenueServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WcfVenueServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WcfVenueServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WcfVenueServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Create(WcfBusinessLogic.Core.Contracts.Data.Venue entity) {
            return base.Channel.Create(entity);
        }
        
        public System.Threading.Tasks.Task<int> CreateAsync(WcfBusinessLogic.Core.Contracts.Data.Venue entity) {
            return base.Channel.CreateAsync(entity);
        }
        
        public void Update(WcfBusinessLogic.Core.Contracts.Data.Venue entity) {
            base.Channel.Update(entity);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(WcfBusinessLogic.Core.Contracts.Data.Venue entity) {
            return base.Channel.UpdateAsync(entity);
        }
        
        public void Delete(int id) {
            base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public WcfBusinessLogic.Core.Contracts.Data.Venue Get(int id) {
            return base.Channel.Get(id);
        }
        
        public System.Threading.Tasks.Task<WcfBusinessLogic.Core.Contracts.Data.Venue> GetAsync(int id) {
            return base.Channel.GetAsync(id);
        }
        
        public WcfBusinessLogic.Core.Contracts.Data.Venue[] ToList() {
            return base.Channel.ToList();
        }
        
        public System.Threading.Tasks.Task<WcfBusinessLogic.Core.Contracts.Data.Venue[]> ToListAsync() {
            return base.Channel.ToListAsync();
        }
    }
}
