@using System.Globalization;
@model TicketManagementMVC.Models.Event.EditEventViewModel
<script>
    //set  culture
    $(function () {
        SetDatePickerCulture('#datepicker', '@CultureInfo.CurrentUICulture.Name');
        SetTimePicker('#timepicker', '@CultureInfo.CurrentUICulture.Name');
    });
</script>

@using (Html.BeginForm("Edit", "Event", FormMethod.Post, new { @id = "editEventForm", @class = "col-sm-10 offset-sm-1" }))
{
    @Html.AntiForgeryToken()
    <br />
    <div id="errorMessagesEditEvent" class="errors-login text-danger"></div>
    <br />
    @Html.HiddenFor(x => x.Event.Id)
    <div class="row pb-4">
        <div class="float-left col-5">
            <div class="form-group">
                @Html.LabelFor(x => x.Event.Title, new { @class = "required" })
                @Html.TextBoxFor(x => x.Event.Title, new { @class = "form-control", autocomplete = "off", @id = "title" })
            </div>

            <div class="form-group">
                <label>@Resource.EventSelectVenueDropDownLabel</label>
                @Html.DropDownList("venue", new SelectList(ViewBag.VenueList, "Id", "Name", "0"),
               new { @class = "form-control", onchange = "GetLayouts();", @id = "venueList", autocomplete = "off" })
            </div>

            <div class="form-group">
                @Html.LabelFor(x => x.Event.LayoutId)
                <select class="form-control required" id="layoutList" name="Event.LayoutId"></select>
                <!-- hidden field to set correct value of layout after it's going to be filled with layots -->
                @Html.HiddenFor(x => x.Event.LayoutId, new { @id = "currentLayout", autocomplete = "off" })
            </div>

            <div class="row pl-3">
                <div class="col-4 pl-0">
                    @Html.LabelFor(x => x.Event.Date, new { @class = "required" })
                    @Html.TextBoxFor(x => x.Event.Date, Model.Event.Date.ToShortDateString(), 
                   new { @id = "datepicker", @class = "form-control required", autocomplete = "off" })
                </div>
                <div class="col-4 pl-0">
                    @Html.LabelFor(x => x.Event.Time, new { @class = "required" })
                    @Html.TextBoxFor(x => x.Event.Time, Model.Event.Time.ToShortTimeString(),
                   new { @id = "timepicker", @class = "form-control required", autocomplete = "off" })
                </div>
            </div>
        </div>
        <div class="float-left col-7 text-center">
            <div class="form-group">
                <input type='file' name="image" onchange="readURL(this);" id="input-file" style="visibility:hidden; width:0px;" accept="image/*" />
                <label for="input-file" class="btn btn-primary mb-1" style="width:360px;">@Resource.SelectImage</label>
                <img id="event-image" src="@Url.Content(Model.Event.ImageURL)" style="width:360px; height:360px; margin-left:4px;" />
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(x => x.Event.Description, new { @class = "required", @for = "description" })
        @Html.TextAreaFor(x => x.Event.Description, new { @class = "required form-control col-12", @id = "description", @rows = "3" })
    </div>

    <div class="form-group text-center">
        <button type="button" class="btn btn-primary register-button col-4" onclick="SaveEventChanges()">@Resource.SaveChangesButton</button>
        <button type="button" class="btn btn-primary register-button col-3" onclick="DeleteEvent('@Model.Event.Id')">@Resource.DeleteButton</button>
        <button type="button" class="btn btn-primary back-button col-2" onclick="location.href='@Url.Action("Index", "Home")'">@Resource.BackButton</button>
    </div>
    <div class="text-center text-success font-weight-bold text" style="font-size:30px;" id="success">@Resource.SuccessNotification</div>
}
<div class="short-devider"></div>
<br />
<h4 class="text-center">@Resource.AreaListLabel</h4>
<table class="table table-striped text-center" id="areaTable">
    <thead>
        <tr>
            <th scope="col">@Resource.DescriptionLabel</th>
            <th scope="col">@Resource.CoordsLabel</th>
            <th scope="col">@Resource.Price</th>
            <th scope="col">@Resource.PurchasedSeatCounter</th>
            <th scope="col"></th>
            <th scope="col"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var area in Model.EventAreas)
        {
            var puchasedSeatCount = area.Seats.Where(x => x.State == 1).ToList();
            <tr id=@area.Id>
                <th scope="row" class="pt-3">@area.Description</th>
                <td class="pt-3">@area.CoordX - @area.CoordY</td>
                <td class="pt-3">@string.Format("${0:N2}", area.Price)</td>
                <td class="pt-3">@puchasedSeatCount.Count/@area.Seats.Count</td>
                <td><input type="button" value="@Resource.EditButton" onclick="GetAreaToEdit('@area.Id')" class="btn btn-primary" /></td>
                @if (puchasedSeatCount.Any())
                {
                    <td><input type="button" value="@Resource.DeleteButton" onclick="DeleteArea('@area.Id')" class="btn btn-primary" disabled /></td>
                }
                else
                {
                    <td><input type="button" value="@Resource.DeleteButton" onclick="DeleteArea('@area.Id')" class="btn btn-primary" /></td>
                }
            </tr>
        }
    </tbody>
</table>
<button type="button" class="btn btn-primary register-button col-12 pt-2" onclick="CreateArea()">@Resource.AddButton</button>